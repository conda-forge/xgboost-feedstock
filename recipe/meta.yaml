{% set name = "xgboost" %}
{% set version = "2.1.1" %}
{% set build_number = 0 %}
{% set min_python = "3.8" %}

{% set string_prefix = "cuda" ~ (cuda_compiler_version | replace('.', '')) %}  # [cuda_compiler_version != "None"]
{% set string_prefix = "cpu" %}  # [cuda_compiler_version == "None"]

package:
  name: xgboost-split
  version: {{ version }}

source:
  url: https://github.com/dmlc/xgboost/releases/download/v{{ version }}/xgboost-{{ version }}.tar.gz
  sha256: a47ca87f3345d2a866cd7ec40933564aa2b7250592d0e9bf613951630fc1fa6f
  patches:
    # xgboost patches
    - patches/0001-Enable-latest-libcxx-on-MacOS.patch  # [osx]

build:
  number: {{ build_number }}
  # Make sure only one Python is built for as packages are `noarch: python`.
  # However using `noarch: python` upsets the linter.
  # So skip all Python's except the minimum Python version upstream supports
  # xref: https://github.com/conda-forge/conda-smithy/issues/1887#issuecomment-2244323850
  # Windows CUDA 11.8 fails due to a compilation error
  # xref: https://github.com/conda-forge/xgboost-feedstock/issues/173
  {% if python is defined and cuda_compiler_version is defined %}
  skip: {{ (
      python.split(".")[:2] != min_python.split(".")[:2] or
      (win and cuda_compiler_version == "11.8")
  ) }}
  {% endif %}

requirements:
  build:
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('m2w64_c') }}    # [win]
    - {{ compiler('m2w64_cxx') }}  # [win]
    - {{ compiler('cuda') }}       # [cuda_compiler != "None" and cuda_compiler_version != "None"]
    - {{ stdlib('c') }}
    - cmake
    - llvm-openmp  # [osx]
    - libgomp      # [linux]
    - ninja
  host:
    - cccl !=2.4.0,!=2.5.0  # [cuda_compiler != "None"]
    - nccl                  # [linux and cuda_compiler != "None"]

outputs:
  - name: libxgboost
    script: install-libxgboost.sh  # [not win]
    script: install-win-wrapper.bat  # [win]
    build:
      activate_in_script: True
      string: {{ string_prefix }}_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      ignore_run_exports_from:
        - {{ compiler('cuda') }}  # [(cuda_compiler_version or "").startswith("11")]
      missing_dso_whitelist:
        # Conda-build raises the missing `R.dll` linkage erroneously.
        # xref: https://github.com/conda/conda-build/pull/4786
        - '*/R.dll'         # [win]
        # Conda-build raises the missing `ld64.so.2` linkage erroneously.
        # xref: https://github.com/conda/conda-build/issues/5403
        - $RPATH/ld64.so.2  # [ppc64le]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}  # [cuda_compiler != "None"]
        - {{ stdlib('c') }}
        - git
        - cmake
        - make
        - llvm-openmp  # [osx]
        - libgomp      # [linux]
      host:
        - nccl         # [linux and cuda_compiler != "None"]
      run:
        - __cuda                   # [cuda_compiler != "None"]
        {% if (cuda_compiler_version or "").startswith("11") %}
        - cuda-version >=11.2,<12
        {% endif %}
    test:
      commands:
        - test -f "${PREFIX}/lib/libxgboost${SHLIB_EXT}"                  # [unix]
        - if not exist %LIBRARY_PREFIX%\mingw-w64\bin\xgboost.dll exit 1  # [win]

  - name: _py-xgboost-mutex
    version: 2.0
    build:
      string: {{ "cpu" if cuda_compiler == "None" else "gpu" }}_0
    test:
      commands:
        - exit 0

  - name: py-xgboost
    script: install-py-xgboost.sh  # [not win]
    script: install-win-wrapper.bat  # [win]
    build:
      noarch: python
      string: {{ string_prefix }}_pyh{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      script_env:
        # Workaround an upstream conda-build issue w/pip & `outputs` by setting env vars manually.
        # xref: https://github.com/conda/conda-build/issues/3993
        - PIP_NO_BUILD_ISOLATION=False
        - PIP_NO_DEPENDENCIES=True
        - PIP_IGNORE_INSTALLED=True
        - PIP_CACHE_DIR=pip_cache
        - PIP_NO_INDEX=True
    requirements:
      build:
        - python                              # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
      host:
        - {{ pin_subpackage('_py-xgboost-mutex', exact=True) }}
        - {{ pin_subpackage('libxgboost', max_pin='x.x.x') }}
        - python >={{ min_python }}
        - hatchling >=1.12.1
        - pip
      run:
        - {{ pin_subpackage('_py-xgboost-mutex', exact=True) }}
        - {{ pin_subpackage('libxgboost', max_pin='x.x.x') }}
        - python >={{ min_python }}
        - numpy
        - scipy
        - scikit-learn
        - __cuda  # [cuda_compiler != "None"]
    test:
      requires:
        - python
      imports:
        - xgboost
      script: test-py-xgboost.py

  - name: py-xgboost-cpu
    build:
      noarch: python
      skip: True  # [cuda_compiler != "None"]
    requirements:
      host:
        - python >={{ min_python }}
        - {{ pin_subpackage('py-xgboost', exact=True) }}
      run:
        - python >={{ min_python }}
        - {{ pin_subpackage('py-xgboost', exact=True) }}
    test:
      requires:
        - python
      imports:
        - xgboost

  - name: py-xgboost-gpu
    build:
      noarch: python
      skip: True  # [cuda_compiler == "None"]
    requirements:
      host:
        - python >={{ min_python }}
        - {{ pin_subpackage('py-xgboost', exact=True) }}
      run:
        - python >={{ min_python }}
        - {{ pin_subpackage('py-xgboost', exact=True) }}
        - __cuda  # [cuda_compiler != "None"]
    test:
      requires:
        - python
      imports:
        - xgboost

  - name: xgboost
    build:
      noarch: python
      string: {{ string_prefix }}_pyh{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
    requirements:
      host:
        - python >={{ min_python }}
        - {{ pin_subpackage('py-xgboost', exact=True) }}
      run:
        - python >={{ min_python }}
        - {{ pin_subpackage('py-xgboost', exact=True) }}
        - __cuda  # [cuda_compiler != "None"]
    test:
      requires:
        - python
      imports:
        - xgboost

  - name: _r-xgboost-mutex
    version: 2.0
    build:
      string: {{ "cpu" if cuda_compiler == "None" else "gpu" }}_0
    test:
      commands:
        - exit 0

  - name: r-xgboost
    script: install-r-xgboost.sh  # [not win]
    script: install-r-xgboost.bat  # [win]
    build:
      skip: True  # [r_base in ("4.1", "4.2") or win]
      string: {{ string_prefix }}_r{{ r_base | replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}
      rpaths:
        - lib/R/lib
      missing_dso_whitelist:
        # Conda-build raises the missing `ld64.so.2` linkage erroneously.
        # xref: https://github.com/conda/conda-build/issues/5403
        - $RPATH/ld64.so.2  # [ppc64le]
    requirements:
      build:
        - {{ compiler('m2w64_c') }}    # [win]
        - {{ compiler('m2w64_cxx') }}  # [win]
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ stdlib('c') }}
        - llvm-openmp                  # [osx]
        - libgomp                      # [linux]
        - git
        - make                         # [not win]
        - posix                        # [win]
        - cmake
        - ninja
        - cross-r-base {{ r_base }}    # [build_platform != target_platform]
        - r-base                       # [build_platform != target_platform]
        - r-matrix                     # [build_platform != target_platform]
        - r-data.table                 # [build_platform != target_platform]
        - r-magrittr                   # [build_platform != target_platform]
        - r-jsonlite                   # [build_platform != target_platform]
        - r-knitr                      # [build_platform != target_platform]
      host:
        - {{ pin_subpackage('_r-xgboost-mutex', exact=True) }}
        - {{ pin_subpackage('libxgboost', max_pin='x.x.x') }}
        - r-base
        - r-matrix
        - r-data.table
        - r-magrittr
        - r-jsonlite
        - r-knitr
      run:
        - {{ pin_subpackage('_r-xgboost-mutex', exact=True) }}
        - {{ pin_subpackage('libxgboost', max_pin='x.x.x') }}
        - r-base
        - r-matrix
        - r-data.table
        - r-magrittr
        - r-jsonlite
        - __cuda  # [cuda_compiler != "None"]
    test:
      requires:
        - r-base
      files:
        - test-r-xgboost.r
      commands:
        - Rscript test-r-xgboost.r

  - name: r-xgboost-cpu
    build:
      skip: True  # [cuda_compiler != "None"]
      skip: True  # [r_base in ("4.1", "4.2") or win]
    requirements:
      host:
        - r-base
        - {{ pin_subpackage('r-xgboost', exact=True) }}
      run:
        - r-base
        - {{ pin_subpackage('r-xgboost', exact=True) }}
    test:
      requires:
        - r-base
      commands:
        - $R -e "library('xgboost')"           # [unix]
        - "\"%R%\" -e \"library('xgboost')\""  # [win]

  - name: r-xgboost-gpu
    build:
      skip: True  # [cuda_compiler == "None"]
      skip: True  # [r_base in ("4.1", "4.2") or win]
    requirements:
      host:
        - r-base
        - {{ pin_subpackage('r-xgboost', exact=True) }}
      run:
        - r-base
        - {{ pin_subpackage('r-xgboost', exact=True) }}
        - __cuda  # [cuda_compiler != "None"]
    test:
      requires:
        - r-base
      commands:
        - $R -e "library('xgboost')"           # [unix]
        - "\"%R%\" -e \"library('xgboost')\""  # [win]

about:
  home: https://github.com/dmlc/xgboost
  license: Apache-2.0
  license_file: LICENSE
  summary: |
    Scalable, Portable and Distributed Gradient Boosting (GBDT, GBRT or GBM) Library, for
    Python, R, Java, Scala, C++ and more. Runs on single machine, Hadoop, Spark, Flink
    and DataFlow
  description: |
    XGBoost is an optimized distributed gradient boosting library designed to be highly efficient,
    flexible and portable. It implements machine learning algorithms under the Gradient Boosting
    framework. XGBoost provides a parallel tree boosting (also known as GBDT, GBM) that solve many
    data science problems in a fast and accurate way. The same code runs on major distributed
    environment (Hadoop, SGE, MPI) and can solve problems beyond billions of examples.
  doc_url: https://xgboost.readthedocs.io/
  dev_url: https://github.com/dmlc/xgboost/

extra:
  feedstock-name: xgboost
  recipe-maintainers:
    - hcho3
    - aldanor
    - fhoehle
    - jakirkham
    - ksangeek
    - xhochy
    - mfansler
